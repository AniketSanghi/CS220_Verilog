Release 14.7 - xst P.20131013 (lin64)
Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--> 
Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.05 secs
 
--> 
Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.05 secs
 
--> 
Reading design: processor_top.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Compilation
  3) Design Hierarchy Analysis
  4) HDL Analysis
  5) HDL Synthesis
     5.1) HDL Synthesis Report
  6) Advanced HDL Synthesis
     6.1) Advanced HDL Synthesis Report
  7) Low Level Synthesis
  8) Partition Report
  9) Final Report
	9.1) Device utilization summary
	9.2) Partition Resource Summary
	9.3) TIMING REPORT


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "processor_top.prj"
Input Format                       : mixed
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "processor_top"
Output Format                      : NGC
Target Device                      : xc3s500e-4-fg320

---- Source Options
Top Module Name                    : processor_top
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Mux Style                          : Auto
Decoder Extraction                 : YES
Priority Encoder Extraction        : Yes
Shift Register Extraction          : YES
Logical Shifter Extraction         : YES
XOR Collapsing                     : YES
ROM Style                          : Auto
Mux Extraction                     : Yes
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Multiplier Style                   : Auto
Automatic Register Balancing       : No

---- Target Options
Add IO Buffers                     : YES
Global Maximum Fanout              : 100000
Add Generic Clock Buffer(BUFG)     : 24
Register Duplication               : YES
Slice Packing                      : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Yes
Use Synchronous Set                : Yes
Use Synchronous Reset              : Yes
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
Verilog 2001                       : YES
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Compilation                              *
=========================================================================
Compiling verilog file "lcd_driver.v" in library work
Compiling verilog file "rotor.v" in library work
Module <lcd_driver> compiled
Compiling verilog file "processor.v" in library work
Module <rotor> compiled
Compiling verilog file "processor_top.v" in library work
Module <processor> compiled
Module <processor_top> compiled
No errors in compilation
Analysis of file <"processor_top.prj"> succeeded.
 

=========================================================================
*                     Design Hierarchy Analysis                         *
=========================================================================
Analyzing hierarchy for module <processor_top> in library <work>.

Analyzing hierarchy for module <rotor> in library <work>.

Analyzing hierarchy for module <processor> in library <work>.

Analyzing hierarchy for module <lcd_driver> in library <work>.


=========================================================================
*                            HDL Analysis                               *
=========================================================================
Analyzing top module <processor_top>.
Module <processor_top> is correct for synthesis.
 
Analyzing module <rotor> in library <work>.
Module <rotor> is correct for synthesis.
 
Analyzing module <processor> in library <work>.
Module <processor> is correct for synthesis.
 
Analyzing module <lcd_driver> in library <work>.
WARNING:Xst:790 - "lcd_driver.v" line 136: Index value(s) does not match array range, simulation mismatch.
WARNING:Xst:790 - "lcd_driver.v" line 164: Index value(s) does not match array range, simulation mismatch.
Module <lcd_driver> is correct for synthesis.
 

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Performing bidirectional port resolution...
INFO:Xst:2679 - Register <lcd_w> in unit <lcd_driver> has a constant value of 0 during circuit operation. The register is replaced by logic.

Synthesizing Unit <rotor>.
    Related source file is "rotor.v".
    Found 1-bit register for signal <rot_event>.
    Summary:
	inferred   1 D-type flip-flop(s).
Unit <rotor> synthesized.


Synthesizing Unit <lcd_driver>.
    Related source file is "lcd_driver.v".
WARNING:Xst:646 - Signal <db> is assigned but never used. This unconnected signal will be trimmed during the optimization process.
    Found finite state machine <FSM_0> for signal <step>.
    -----------------------------------------------------------------------
    | States             | 3                                              |
    | Transitions        | 3                                              |
    | Inputs             | 0                                              |
    | Outputs            | 3                                              |
    | Clock              | clk                       (rising_edge)        |
    | Clock enable       | step$cmp_eq0000           (positive)           |
    | Power Up State     | 01                                             |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found finite state machine <FSM_1> for signal <state>.
    -----------------------------------------------------------------------
    | States             | 15                                             |
    | Transitions        | 17                                             |
    | Inputs             | 2                                              |
    | Outputs            | 15                                             |
    | Clock              | clk                       (rising_edge)        |
    | Clock enable       | state$not0000             (positive)           |
    | Power Up State     | 00000                                          |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found finite state machine <FSM_2> for signal <linechange>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 6                                              |
    | Inputs             | 1                                              |
    | Outputs            | 4                                              |
    | Clock              | clk                       (rising_edge)        |
    | Clock enable       | linechange$not0000        (positive)           |
    | Power Up State     | 00                                             |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 1-bit register for signal <lcd_e>.
    Found 1-bit register for signal <lcd_rs>.
    Found 4-bit register for signal <data>.
    Found 21-bit up counter for signal <counter>.
    Found 8-bit register for signal <pos>.
    Found 8-bit subtractor for signal <pos$addsub0000>.
    Summary:
	inferred   3 Finite State Machine(s).
	inferred   1 Counter(s).
	inferred  14 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <lcd_driver> synthesized.


Synthesizing Unit <processor>.
    Related source file is "processor.v".
    Register <line1<103>> equivalent to <line1<102>> has been removed
    Register <line1<110>> equivalent to <line1<102>> has been removed
    Register <line1<111>> equivalent to <line1<102>> has been removed
    Register <line1<118>> equivalent to <line1<102>> has been removed
    Register <line1<119>> equivalent to <line1<102>> has been removed
    Register <line1<126>> equivalent to <line1<102>> has been removed
    Register <line1<127>> equivalent to <line1<102>> has been removed
    Register <line1<14>> equivalent to <line1<102>> has been removed
    Register <line1<15>> equivalent to <line1<102>> has been removed
    Register <line1<22>> equivalent to <line1<102>> has been removed
    Register <line1<23>> equivalent to <line1<102>> has been removed
    Register <line1<30>> equivalent to <line1<102>> has been removed
    Register <line1<31>> equivalent to <line1<102>> has been removed
    Register <line1<38>> equivalent to <line1<102>> has been removed
    Register <line1<39>> equivalent to <line1<102>> has been removed
    Register <line1<46>> equivalent to <line1<102>> has been removed
    Register <line1<47>> equivalent to <line1<102>> has been removed
    Register <line1<54>> equivalent to <line1<102>> has been removed
    Register <line1<55>> equivalent to <line1<102>> has been removed
    Register <line1<62>> equivalent to <line1<102>> has been removed
    Register <line1<63>> equivalent to <line1<102>> has been removed
    Register <line1<6>> equivalent to <line1<102>> has been removed
    Register <line1<70>> equivalent to <line1<102>> has been removed
    Register <line1<71>> equivalent to <line1<102>> has been removed
    Register <line1<78>> equivalent to <line1<102>> has been removed
    Register <line1<79>> equivalent to <line1<102>> has been removed
    Register <line1<7>> equivalent to <line1<102>> has been removed
    Register <line1<86>> equivalent to <line1<102>> has been removed
    Register <line1<87>> equivalent to <line1<102>> has been removed
    Register <line1<94>> equivalent to <line1<102>> has been removed
    Register <line1<95>> equivalent to <line1<102>> has been removed
    Register <line2<102>> equivalent to <line1<102>> has been removed
    Register <line2<103>> equivalent to <line1<102>> has been removed
    Register <line2<110>> equivalent to <line1<102>> has been removed
    Register <line2<111>> equivalent to <line1<102>> has been removed
    Register <line2<118>> equivalent to <line1<102>> has been removed
    Register <line2<119>> equivalent to <line1<102>> has been removed
    Register <line2<126>> equivalent to <line1<102>> has been removed
    Register <line2<127>> equivalent to <line1<102>> has been removed
    Register <line2<14>> equivalent to <line1<102>> has been removed
    Register <line2<15>> equivalent to <line1<102>> has been removed
    Register <line2<22>> equivalent to <line1<102>> has been removed
    Register <line2<23>> equivalent to <line1<102>> has been removed
    Register <line2<30>> equivalent to <line1<102>> has been removed
    Register <line2<31>> equivalent to <line1<102>> has been removed
    Register <line2<38>> equivalent to <line1<102>> has been removed
    Register <line2<39>> equivalent to <line1<102>> has been removed
    Register <line2<46>> equivalent to <line1<102>> has been removed
    Register <line2<47>> equivalent to <line1<102>> has been removed
    Register <line2<54>> equivalent to <line1<102>> has been removed
    Register <line2<55>> equivalent to <line1<102>> has been removed
    Register <line2<62>> equivalent to <line1<102>> has been removed
    Register <line2<63>> equivalent to <line1<102>> has been removed
    Register <line2<6>> equivalent to <line1<102>> has been removed
    Register <line2<70>> equivalent to <line1<102>> has been removed
    Register <line2<71>> equivalent to <line1<102>> has been removed
    Register <line2<78>> equivalent to <line1<102>> has been removed
    Register <line2<79>> equivalent to <line1<102>> has been removed
    Register <line2<7>> equivalent to <line1<102>> has been removed
    Register <line2<86>> equivalent to <line1<102>> has been removed
    Register <line2<87>> equivalent to <line1<102>> has been removed
    Register <line2<94>> equivalent to <line1<102>> has been removed
    Register <line2<95>> equivalent to <line1<102>> has been removed
    Found finite state machine <FSM_3> for signal <step>.
    -----------------------------------------------------------------------
    | States             | 12                                             |
    | Transitions        | 134                                            |
    | Inputs             | 11                                             |
    | Outputs            | 13                                             |
    | Clock              | clk                       (rising_edge)        |
    | Clock enable       | step$not0000              (positive)           |
    | Power Up State     | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 16-bit shifter arithmetic right for signal <$shift0000> created at line 498.
    Found 3-bit register for signal <instruction>.
    Found 6-bit register for signal <line1<125:120>>.
    Found 6-bit register for signal <line1<117:112>>.
    Found 6-bit register for signal <line1<109:104>>.
    Found 7-bit register for signal <line1<102:96>>.
    Found 6-bit register for signal <line1<93:88>>.
    Found 6-bit register for signal <line1<85:80>>.
    Found 6-bit register for signal <line1<77:72>>.
    Found 6-bit register for signal <line1<69:64>>.
    Found 6-bit register for signal <line1<61:56>>.
    Found 6-bit register for signal <line1<53:48>>.
    Found 6-bit register for signal <line1<45:40>>.
    Found 6-bit register for signal <line1<37:32>>.
    Found 6-bit register for signal <line1<29:24>>.
    Found 6-bit register for signal <line1<21:16>>.
    Found 6-bit register for signal <line1<13:8>>.
    Found 6-bit register for signal <line1<5:0>>.
    Found 1-bit 8-to-1 multiplexer for signal <line1_0$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_1$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_10$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_100$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_101$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_102$mux0000> created at line 92.
    Found 6-bit adder for signal <line1_103_96$add0000> created at line 128.
    Found 6-bit adder for signal <line1_103_96$add0001> created at line 164.
    Found 1-bit 8-to-1 multiplexer for signal <line1_104$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_105$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_106$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_107$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_108$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_109$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_11$mux0000> created at line 92.
    Found 6-bit adder for signal <line1_111_104$add0000> created at line 127.
    Found 6-bit adder for signal <line1_111_104$add0001> created at line 163.
    Found 1-bit 8-to-1 multiplexer for signal <line1_112$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_113$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_114$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_115$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_116$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_117$mux0000> created at line 92.
    Found 6-bit adder for signal <line1_119_112$add0000> created at line 126.
    Found 6-bit adder for signal <line1_119_112$add0001> created at line 162.
    Found 1-bit 8-to-1 multiplexer for signal <line1_12$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_120$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_121$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_122$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_123$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_124$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_125$mux0000> created at line 92.
    Found 6-bit adder for signal <line1_127_120$add0000> created at line 125.
    Found 6-bit adder for signal <line1_127_120$add0001> created at line 161.
    Found 1-bit 8-to-1 multiplexer for signal <line1_13$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_16$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_17$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_18$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_19$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_2$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_20$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_21$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_24$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_25$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_26$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_27$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_28$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_29$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_3$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_32$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_33$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_34$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_35$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_36$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_37$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_4$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_40$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_41$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_42$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_43$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_44$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_45$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_48$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_49$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_5$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_50$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_51$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_52$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_53$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_56$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_57$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_58$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_59$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_60$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_61$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_64$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_65$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_66$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_67$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_68$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_69$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_72$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_73$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_74$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_75$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_76$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_77$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_8$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_80$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_81$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_82$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_83$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_84$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_85$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_88$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_89$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_9$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_90$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_91$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_92$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_93$mux0000> created at line 92.
    Found 6-bit adder for signal <line1_95_88$add0000> created at line 129.
    Found 6-bit adder for signal <line1_95_88$add0001> created at line 165.
    Found 1-bit 8-to-1 multiplexer for signal <line1_96$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_97$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_98$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line1_99$mux0000> created at line 92.
    Found 6-bit register for signal <line2<125:120>>.
    Found 6-bit register for signal <line2<117:112>>.
    Found 6-bit register for signal <line2<109:104>>.
    Found 6-bit register for signal <line2<101:96>>.
    Found 6-bit register for signal <line2<93:88>>.
    Found 6-bit register for signal <line2<85:80>>.
    Found 6-bit register for signal <line2<77:72>>.
    Found 6-bit register for signal <line2<69:64>>.
    Found 6-bit register for signal <line2<61:56>>.
    Found 6-bit register for signal <line2<53:48>>.
    Found 6-bit register for signal <line2<45:40>>.
    Found 6-bit register for signal <line2<37:32>>.
    Found 6-bit register for signal <line2<29:24>>.
    Found 6-bit register for signal <line2<21:16>>.
    Found 6-bit register for signal <line2<13:8>>.
    Found 6-bit register for signal <line2<5:0>>.
    Found 1-bit 8-to-1 multiplexer for signal <line2_0$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_1$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_10$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_100$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_101$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_103_96$add0000> created at line 135.
    Found 6-bit adder for signal <line2_103_96$add0001> created at line 171.
    Found 6-bit adder for signal <line2_103_96$add0002> created at line 218.
    Found 1-bit 8-to-1 multiplexer for signal <line2_104$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_105$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_106$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_107$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_108$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_109$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_11$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_111_104$add0000> created at line 134.
    Found 6-bit adder for signal <line2_111_104$add0001> created at line 170.
    Found 6-bit adder for signal <line2_111_104$add0002> created at line 217.
    Found 1-bit 8-to-1 multiplexer for signal <line2_112$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_113$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_114$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_115$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_116$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_117$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_119_112$add0000> created at line 133.
    Found 6-bit adder for signal <line2_119_112$add0001> created at line 169.
    Found 6-bit adder for signal <line2_119_112$add0002> created at line 216.
    Found 1-bit 8-to-1 multiplexer for signal <line2_12$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_120$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_121$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_122$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_123$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_124$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_125$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_127_120$add0000> created at line 132.
    Found 6-bit adder for signal <line2_127_120$add0001> created at line 168.
    Found 6-bit adder for signal <line2_127_120$add0002> created at line 215.
    Found 1-bit 8-to-1 multiplexer for signal <line2_13$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_15_8$add0000> created at line 138.
    Found 6-bit adder for signal <line2_15_8$add0001> created at line 174.
    Found 6-bit adder for signal <line2_15_8$add0002> created at line 221.
    Found 1-bit 8-to-1 multiplexer for signal <line2_16$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_17$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_18$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_19$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_2$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_20$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_21$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_23_16$add0000> created at line 137.
    Found 6-bit adder for signal <line2_23_16$add0001> created at line 173.
    Found 6-bit adder for signal <line2_23_16$add0002> created at line 220.
    Found 1-bit 8-to-1 multiplexer for signal <line2_24$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_25$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_26$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_27$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_28$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_29$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_3$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_31_24$add0000> created at line 136.
    Found 6-bit adder for signal <line2_31_24$add0001> created at line 172.
    Found 6-bit adder for signal <line2_31_24$add0002> created at line 219.
    Found 1-bit 8-to-1 multiplexer for signal <line2_32$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_33$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_34$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_35$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_36$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_37$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_39_32$add0000> created at line 135.
    Found 6-bit adder for signal <line2_39_32$add0001> created at line 171.
    Found 6-bit adder for signal <line2_39_32$add0002> created at line 218.
    Found 1-bit 8-to-1 multiplexer for signal <line2_4$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_40$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_41$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_42$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_43$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_44$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_45$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_47_40$add0000> created at line 134.
    Found 6-bit adder for signal <line2_47_40$add0001> created at line 170.
    Found 6-bit adder for signal <line2_47_40$add0002> created at line 217.
    Found 1-bit 8-to-1 multiplexer for signal <line2_48$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_49$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_5$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_50$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_51$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_52$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_53$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_55_48$add0000> created at line 133.
    Found 6-bit adder for signal <line2_55_48$add0001> created at line 169.
    Found 6-bit adder for signal <line2_55_48$add0002> created at line 216.
    Found 1-bit 8-to-1 multiplexer for signal <line2_56$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_57$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_58$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_59$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_60$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_61$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_63_56$add0000> created at line 132.
    Found 6-bit adder for signal <line2_63_56$add0001> created at line 168.
    Found 6-bit adder for signal <line2_63_56$add0002> created at line 215.
    Found 1-bit 8-to-1 multiplexer for signal <line2_64$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_65$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_66$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_67$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_68$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_69$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_71_64$add0000> created at line 139.
    Found 6-bit adder for signal <line2_71_64$add0001> created at line 175.
    Found 6-bit adder for signal <line2_71_64$add0002> created at line 222.
    Found 1-bit 8-to-1 multiplexer for signal <line2_72$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_73$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_74$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_75$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_76$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_77$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_79_72$add0000> created at line 138.
    Found 6-bit adder for signal <line2_79_72$add0001> created at line 174.
    Found 6-bit adder for signal <line2_79_72$add0002> created at line 221.
    Found 6-bit adder for signal <line2_7_0$add0000> created at line 139.
    Found 6-bit adder for signal <line2_7_0$add0001> created at line 175.
    Found 6-bit adder for signal <line2_7_0$add0002> created at line 222.
    Found 1-bit 8-to-1 multiplexer for signal <line2_8$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_80$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_81$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_82$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_83$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_84$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_85$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_87_80$add0000> created at line 137.
    Found 6-bit adder for signal <line2_87_80$add0001> created at line 173.
    Found 6-bit adder for signal <line2_87_80$add0002> created at line 220.
    Found 1-bit 8-to-1 multiplexer for signal <line2_88$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_89$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_9$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_90$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_91$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_92$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_93$mux0000> created at line 92.
    Found 6-bit adder for signal <line2_95_88$add0000> created at line 136.
    Found 6-bit adder for signal <line2_95_88$add0001> created at line 172.
    Found 6-bit adder for signal <line2_95_88$add0002> created at line 219.
    Found 1-bit 8-to-1 multiplexer for signal <line2_96$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_97$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_98$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <line2_99$mux0000> created at line 92.
    Found 1-bit register for signal <prev_rot_event>.
    Found 5-bit register for signal <RAddr1>.
    Found 1-bit 8-to-1 multiplexer for signal <RAddr1_0$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <RAddr1_1$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <RAddr1_2$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <RAddr1_3$mux0000> created at line 92.
    Found 1-bit 8-to-1 multiplexer for signal <RAddr1_4$mux0000> created at line 92.
    Found 5-bit register for signal <RAddr2>.
    Found 16-bit register for signal <RData1>.
    Found 16-bit 8-to-1 multiplexer for signal <RData1$mux0000> created at line 92.
    Found 16-bit register for signal <RData2>.
    Found 512-bit register for signal <register>.
    Found 4-bit register for signal <shift>.
    Found 5-bit register for signal <WAddr>.
    Found 16-bit register for signal <WData>.
    Found 16-bit comparator less for signal <WData_0$cmp_lt0000> created at line 388.
    Found 1-bit xor2 for signal <WData_0$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_1$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_10$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_11$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_12$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_13$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_14$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_15$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_2$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_3$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_4$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_5$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_6$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_7$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_8$xor0000> created at line 444.
    Found 1-bit xor2 for signal <WData_9$xor0000> created at line 444.
INFO:Xst:738 - HDL ADVISOR - 512 flip-flops were inferred for signal <register>. You may be trying to describe a RAM in a way that is incompatible with block and distributed RAM resources available on Xilinx devices, or with a specific template that is not supported. Please review the Xilinx resources documentation and the XST user manual for coding guidelines. Taking advantage of RAM resources will lead to improved device usage and reduced synthesis time.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred 776 D-type flip-flop(s).
	inferred  58 Adder/Subtractor(s).
	inferred   1 Comparator(s).
	inferred 246 Multiplexer(s).
	inferred   1 Combinational logic shifter(s).
Unit <processor> synthesized.


Synthesizing Unit <processor_top>.
    Related source file is "processor_top.v".
Unit <processor_top> synthesized.

INFO:Xst:1767 - HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.

=========================================================================
HDL Synthesis Report

Macro Statistics
# Adders/Subtractors                                   : 59
 6-bit adder                                           : 58
 8-bit subtractor                                      : 1
# Counters                                             : 1
 21-bit up counter                                     : 1
# Registers                                            : 266
 1-bit register                                        : 228
 16-bit register                                       : 34
 3-bit register                                        : 1
 4-bit register                                        : 2
 8-bit register                                        : 1
# Comparators                                          : 1
 16-bit comparator less                                : 1
# Multiplexers                                         : 201
 1-bit 8-to-1 multiplexer                              : 198
 16-bit 32-to-1 multiplexer                            : 2
 16-bit 8-to-1 multiplexer                             : 1
# Logic shifters                                       : 1
 16-bit shifter arithmetic right                       : 1
# Xors                                                 : 16
 1-bit xor2                                            : 16

=========================================================================

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

Analyzing FSM <FSM_3> for best encoding.
Optimizing FSM <P1/step/FSM> on signal <step[1:4]> with user encoding.
-------------------
 State | Encoding
-------------------
 0000  | 0000
 0001  | 0001
 0010  | 0010
 0011  | 0011
 0100  | 0100
 0101  | 0101
 0110  | 0110
 0111  | 0111
 1000  | 1000
 1001  | 1001
 1010  | 1010
 1011  | 1011
-------------------
Analyzing FSM <FSM_2> for best encoding.
Optimizing FSM <P1/L1/linechange/FSM> on signal <linechange[1:4]> with one-hot encoding.
-------------------
 State | Encoding
-------------------
 00    | 0001
 01    | 1000
 10    | 0100
 11    | 0010
-------------------
Analyzing FSM <FSM_1> for best encoding.
Optimizing FSM <P1/L1/state/FSM> on signal <state[1:15]> with one-hot encoding.
--------------------------
 State | Encoding
--------------------------
 00000 | 000000000000001
 00001 | 000000000000010
 00010 | 000000000000100
 00011 | 000000000001000
 00100 | 000000000010000
 00101 | 000000000100000
 00110 | 000000001000000
 00111 | 000000010000000
 01000 | 000000100000000
 01001 | 000001000000000
 01010 | 000010000000000
 01011 | 000100000000000
 01100 | 001000000000000
 01101 | 010000000000000
 01110 | 100000000000000
--------------------------
Analyzing FSM <FSM_0> for best encoding.
Optimizing FSM <P1/L1/step/FSM> on signal <step[1:3]> with one-hot encoding.
-------------------
 State | Encoding
-------------------
 01    | 001
 10    | 010
 11    | 100
-------------------

=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# FSMs                                                 : 4
# Adders/Subtractors                                   : 59
 6-bit adder                                           : 58
 8-bit subtractor                                      : 1
# Counters                                             : 1
 21-bit up counter                                     : 1
# Registers                                            : 791
 Flip-Flops                                            : 791
# Comparators                                          : 1
 16-bit comparator less                                : 1
# Multiplexers                                         : 201
 1-bit 8-to-1 multiplexer                              : 198
 16-bit 32-to-1 multiplexer                            : 2
 16-bit 8-to-1 multiplexer                             : 1
# Logic shifters                                       : 1
 16-bit shifter arithmetic right                       : 1
# Xors                                                 : 16
 1-bit xor2                                            : 16

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================

Optimizing unit <processor_top> ...

Optimizing unit <lcd_driver> ...
WARNING:Xst:1293 - FF/Latch <pos_0> has a constant value of 1 in block <lcd_driver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <pos_1> has a constant value of 1 in block <lcd_driver>. This FF/Latch will be trimmed during the optimization process.

Optimizing unit <processor> ...

Mapping all equations...
Building and optimizing final netlist ...
Found area constraint ratio of 100 (+ 5) on block processor_top, actual ratio is 37.
FlipFlop P1/L1/pos_2 has been replicated 2 time(s)
FlipFlop P1/L1/pos_5 has been replicated 1 time(s)
FlipFlop P1/L1/pos_6 has been replicated 1 time(s)
FlipFlop P1/instruction_0 has been replicated 2 time(s)
FlipFlop P1/instruction_1 has been replicated 2 time(s)
FlipFlop P1/instruction_2 has been replicated 2 time(s)
FlipFlop P1/step_FSM_FFd1 has been replicated 2 time(s)
FlipFlop P1/step_FSM_FFd2 has been replicated 1 time(s)
FlipFlop P1/step_FSM_FFd3 has been replicated 1 time(s)
FlipFlop P1/step_FSM_FFd4 has been replicated 2 time(s)

Final Macro Processing ...

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 852
 Flip-Flops                                            : 852

=========================================================================

=========================================================================
*                           Partition Report                            *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Final Report                               *
=========================================================================
Final Results
RTL Top Level Output File Name     : processor_top.ngr
Top Level Output File Name         : processor_top
Output Format                      : NGC
Optimization Goal                  : Speed
Keep Hierarchy                     : No

Design Statistics
# IOs                              : 17

Cell Usage :
# BELS                             : 3165
#      GND                         : 1
#      INV                         : 2
#      LUT1                        : 20
#      LUT2                        : 47
#      LUT2_D                      : 44
#      LUT2_L                      : 4
#      LUT3                        : 723
#      LUT3_D                      : 26
#      LUT3_L                      : 14
#      LUT4                        : 1350
#      LUT4_D                      : 74
#      LUT4_L                      : 94
#      MUXCY                       : 42
#      MUXF5                       : 478
#      MUXF6                       : 128
#      MUXF7                       : 64
#      MUXF8                       : 32
#      VCC                         : 1
#      XORCY                       : 21
# FlipFlops/Latches                : 852
#      FD                          : 1
#      FDE                         : 829
#      FDR                         : 21
#      FDSE                        : 1
# Clock Buffers                    : 1
#      BUFGP                       : 1
# IO Buffers                       : 16
#      IBUF                        : 9
#      OBUF                        : 7
=========================================================================

Device utilization summary:
---------------------------

Selected Device : 3s500efg320-4 

 Number of Slices:                     1260  out of   4656    27%  
 Number of Slice Flip Flops:            852  out of   9312     9%  
 Number of 4 input LUTs:               2398  out of   9312    25%  
 Number of IOs:                          17
 Number of bonded IOBs:                  17  out of    232     7%  
 Number of GCLKs:                         1  out of     24     4%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
TIMING REPORT

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------+-------+
Clock Signal                       | Clock buffer(FF name)  | Load  |
-----------------------------------+------------------------+-------+
clk                                | BUFGP                  | 852   |
-----------------------------------+------------------------+-------+

Asynchronous Control Signals Information:
----------------------------------------
No asynchronous control signals found in this design

Timing Summary:
---------------
Speed Grade: -4

   Minimum period: 8.530ns (Maximum Frequency: 117.233MHz)
   Minimum input arrival time before clock: 6.626ns
   Maximum output required time after clock: 4.310ns
   Maximum combinational path delay: No path found

Timing Detail:
--------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'clk'
  Clock period: 8.530ns (frequency: 117.233MHz)
  Total number of paths / destination ports: 44311 / 1679
-------------------------------------------------------------------------
Delay:               8.530ns (Levels of Logic = 5)
  Source:            P1/instruction_1_1 (FF)
  Destination:       P1/register_31_15 (FF)
  Source Clock:      clk rising
  Destination Clock: clk rising

  Data Path: P1/instruction_1_1 to P1/register_31_15
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDE:C->Q              2   0.591   0.622  P1/instruction_1_1 (P1/instruction_1_1)
     LUT3_D:I0->O         12   0.704   0.965  P1/step_cmp_eq00031 (P1/step_cmp_eq0003)
     LUT4:I3->O            2   0.704   0.451  P1/register_0_mux0000<0>31_SW0 (N367)
     LUT4_D:I3->O         15   0.704   1.021  P1/register_0_mux0000<0>31 (P1/N58)
     LUT4_D:I3->O         15   0.704   1.052  P1/register_22_mux0000<0>21 (P1/N108)
     LUT4:I2->O            1   0.704   0.000  P1/register_22_mux0000<8>1 (P1/register_22_mux0000<8>)
     FDE:D                     0.308          P1/register_22_7
    ----------------------------------------
    Total                      8.530ns (4.419ns logic, 4.111ns route)
                                       (51.8% logic, 48.2% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'clk'
  Total number of paths / destination ports: 1109 / 1099
-------------------------------------------------------------------------
Offset:              6.626ns (Levels of Logic = 4)
  Source:            PB<2> (PAD)
  Destination:       P1/register_23_15 (FF)
  Destination Clock: clk rising

  Data Path: PB<2> to P1/register_23_15
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O             2   1.218   0.482  PB_2_IBUF (PB_2_IBUF)
     LUT3:I2->O           32   0.704   1.437  P1/register_0_mux0000<0>51 (P1/N84)
     LUT4:I0->O           16   0.704   1.069  P1/register_9_mux0000<0>21 (P1/N125)
     LUT4:I2->O            1   0.704   0.000  P1/register_9_mux0000<9>1 (P1/register_9_mux0000<9>)
     FDE:D                     0.308          P1/register_9_6
    ----------------------------------------
    Total                      6.626ns (3.638ns logic, 2.988ns route)
                                       (54.9% logic, 45.1% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'clk'
  Total number of paths / destination ports: 6 / 6
-------------------------------------------------------------------------
Offset:              4.310ns (Levels of Logic = 1)
  Source:            P1/L1/lcd_e (FF)
  Destination:       lcd_e (PAD)
  Source Clock:      clk rising

  Data Path: P1/L1/lcd_e to lcd_e
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDE:C->Q              2   0.591   0.447  P1/L1/lcd_e (P1/L1/lcd_e)
     OBUF:I->O                 3.272          lcd_e_OBUF (lcd_e)
    ----------------------------------------
    Total                      4.310ns (3.863ns logic, 0.447ns route)
                                       (89.6% logic, 10.4% route)

=========================================================================


Total REAL time to Xst completion: 64.00 secs
Total CPU time to Xst completion: 44.31 secs
 
--> 


Total memory usage is 622368 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :    5 (   0 filtered)
Number of infos    :    3 (   0 filtered)

